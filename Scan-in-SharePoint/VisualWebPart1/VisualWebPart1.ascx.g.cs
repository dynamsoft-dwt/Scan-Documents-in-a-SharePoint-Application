//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Scan_in_SharePoint.VisualWebPart1 {
    using System.Web.UI.WebControls.Expressions;
    using System.Web.UI.HtmlControls;
    using System.Collections;
    using System.Text;
    using System.Web.UI;
    using System.Collections.Generic;
    using System.Linq;
    using System.Xml.Linq;
    using Microsoft.SharePoint.WebPartPages;
    using System.Web.SessionState;
    using System.Configuration;
    using Microsoft.SharePoint;
    using System.Web;
    using System.Web.DynamicData;
    using System.Web.Caching;
    using System.Web.Profile;
    using System.ComponentModel.DataAnnotations;
    using System.Web.UI.WebControls;
    using System.Web.Security;
    using System;
    using Microsoft.SharePoint.Utilities;
    using System.Text.RegularExpressions;
    using System.Collections.Specialized;
    using System.Web.UI.WebControls.WebParts;
    using Microsoft.SharePoint.WebControls;
    using System.CodeDom.Compiler;
    
    
    public partial class VisualWebPart1 {
        
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebPartCodeGenerator", "12.0.0.0")]
        public static implicit operator global::System.Web.UI.TemplateControl(VisualWebPart1 target) 
        {
            return target == null ? null : target.TemplateControl;
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        private void @__BuildControlTree(global::Scan_in_SharePoint.VisualWebPart1.VisualWebPart1 @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Use Dynamic Web TWAIN to Upload</" +
                        "title>\r\n    <script type=\"text/javascript\" src=\"../_layouts/15/Resources/dynamso" +
                        "ft.webtwain.initiate.js\"></script>\r\n    <script type=\"text/javascript\" src=\"../_" +
                        "layouts/15/Resources/dynamsoft.webtwain.config.js\"></script>\r\n\r\n</head>\r\n<body>\r" +
                        "\n    <h1>Scan and Upload Documents</h1>\r\n    <select id=\"source\"></select>\r\n    " +
                        "<input type=\"button\" value=\"Scan\" onclick=\"AcquireImage();\" />\r\n    <input type=" +
                        "\"button\" value=\"Open a local file\" onclick=\"LoadImages();\" />\r\n    <input type=\"" +
                        "button\" value=\"Upload\" onclick=\"UploadImage();\" /><br />\r\n    <div id=\"dwtcontro" +
                        "lContainer\"></div>\r\n\r\n    <script type=\"text/javascript\">\r\n        Dynamsoft.Web" +
                        "TwainEnv.RegisterEvent(\'OnWebTwainReady\', Dynamsoft_OnReady); // Register OnWebT" +
                        "wainReady event. This event fires as soon as Dynamic Web TWAIN is initialized an" +
                        "d ready to be used\r\n\r\n        var DWObject;\r\n\r\n        function Dynamsoft_OnRead" +
                        "y() {\r\n            DWObject = Dynamsoft.WebTwainEnv.GetWebTwain(\'dwtcontrolConta" +
                        "iner\'); // Get the Dynamic Web TWAIN object that is embeded in the div with id \'" +
                        "dwtcontrolContainer\'\r\n            if (DWObject) {\r\n                var count = D" +
                        "WObject.SourceCount; // Populate how many sources are installed in the system\r\n " +
                        "               for (var i = 0; i < count; i++)\r\n                    document.get" +
                        "ElementById(\"source\").options.add(new Option(DWObject.GetSourceNameItems(i), i))" +
                        ";  // Add the sources in a drop-down list\r\n            }\r\n        }\r\n\r\n        f" +
                        "unction AcquireImage() {\r\n            if (DWObject) {\r\n                DWObject." +
                        "SelectSourceByIndex(document.getElementById(\"source\").selectedIndex);\r\n         " +
                        "       DWObject.OpenSource();\r\n                DWObject.IfDisableSourceAfterAcqu" +
                        "ire = true;\t// Scanner source will be disabled/closed automatically after the sc" +
                        "an.\r\n                DWObject.AcquireImage();\r\n            }\r\n        }\r\n\r\n     " +
                        "   //Callback functions for async APIs\r\n        function OnSuccess() {\r\n        " +
                        "    console.log(\'successful\');\r\n        }\r\n\r\n        function OnFailure(errorCod" +
                        "e, errorString) {\r\n            alert(errorString);\r\n        }\r\n\r\n        functio" +
                        "n LoadImages() {\r\n            if (DWObject) {\r\n                DWObject.IfShowFi" +
                        "leDialog = true; // Open the system\'s file dialog to load image\r\n               " +
                        " DWObject.LoadImageEx(\"\", EnumDWT_ImageType.IT_ALL, OnSuccess, OnFailure); // Lo" +
                        "ad images in all supported formats (.bmp, .jpg, .tif, .png, .pdf). OnSuccess or " +
                        "OnFailure will be called after the operation\r\n            }\r\n        }\r\n\r\n      " +
                        "  // OnHttpUploadSuccess and OnHttpUploadFailure are callback functions.\r\n      " +
                        "  // OnHttpUploadSuccess is the callback function for successful uploads while O" +
                        "nHttpUploadFailure is for failed ones.\r\n        function OnHttpUploadSuccess() {" +
                        "\r\n            location.reload();\r\n        }\r\n\r\n        function OnHttpUploadFail" +
                        "ure(errorCode, errorString, sHttpResponse) {\r\n            alert(sHttpResponse);\r" +
                        "\n        }\r\n\r\n        function UploadImage() {\r\n            if (DWObject) {\r\n   " +
                        "             // If no image in buffer, return the function\r\n                if (" +
                        "DWObject.HowManyImagesInBuffer == 0)\r\n                    return;\r\n             " +
                        "   var strHTTPServer = location.hostname;\r\n                DWObject.IfSSL = fals" +
                        "e; // Set whether SSL is used\r\n                DWObject.HTTPPort = location.port" +
                        " == \"\" ? 80 : location.port;\r\n                var Digital = new Date();\r\n       " +
                        "         var uploadfilename = Digital.getMilliseconds(); // Uses milliseconds ac" +
                        "cording to local time as the file name\r\n                DWObject.HTTPUploadAllTh" +
                        "roughPutAsPDF(strHTTPServer, \"/Document%20Library/\" + uploadfilename + \".pdf\", O" +
                        "nHttpUploadSuccess, OnHttpUploadFailure);\r\n            }\r\n        }\r\n    </scrip" +
                        "t>\r\n</body>\r\n</html>\r\n"));
        }
        
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        private void InitializeControl() {
            this.@__BuildControlTree(this);
            this.Load += new global::System.EventHandler(this.Page_Load);
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        protected virtual object Eval(string expression) {
            return global::System.Web.UI.DataBinder.Eval(this.Page.GetDataItem(), expression);
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        [GeneratedCodeAttribute("Microsoft.VisualStudio.SharePoint.ProjectExtensions.CodeGenerators.SharePointWebP" +
            "artCodeGenerator", "12.0.0.0")]
        protected virtual string Eval(string expression, string format) {
            return global::System.Web.UI.DataBinder.Eval(this.Page.GetDataItem(), expression, format);
        }
    }
}
